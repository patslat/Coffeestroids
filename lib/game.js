// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Asteroids.Game = (function() {
    Game.DIM_X = 900;

    Game.DIM_Y = 900;

    function Game(ctx) {
      this._bindKeyHandlers = __bind(this._bindKeyHandlers, this);
      this.start = __bind(this.start, this);
      this.ctx = ctx;
      this.ship = null;
      this.asteroids = [];
      this.bullets = [];
    }

    Game.prototype.start = function() {
      this._bindKeyHandlers();
      ({
        step: function(timestamp) {
          this._step();
          return requestAnimationFrame(step);
        }
      });
      return requestAnimationFrame(step);
    };

    Game.prototype._drawAllTheThings = function() {
      var asteroid, bullet, _i, _j, _len, _len1, _ref, _ref1, _results;
      this.ctx.clearRect(0, 0, this.DIM_X, this.DIM_Y);
      this.ship.draw(this.ctx);
      _ref = this.asteroids;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        asteroid = _ref[_i];
        asteroid.draw();
      }
      _ref1 = this.bullets;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        bullet = _ref1[_j];
        _results.push(bullet.draw());
      }
      return _results;
    };

    Game.prototype._moveAllTheThings = function() {
      var asteroid, bullet, _i, _j, _len, _len1, _ref, _ref1, _results;
      this.ship.move();
      _ref = this.asteroids;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        asteroid = _ref[_i];
        asteroid.move();
      }
      _ref1 = this.bullets;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        bullet = _ref1[_j];
        _results.push(bullet.move());
      }
      return _results;
    };

    Game.prototype._checkCollisions = function() {
      this._checkAsteroidCollisions();
      return this._checkBulletCollisions();
    };

    Game.prototype._checkAsteroidCollisions = function() {
      var asteroid, _i, _len, _ref, _results;
      _ref = this.asteroids;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        asteroid = _ref[_i];
        if (asteroid.isCollidedWith(this.ship)) {
          console.log("WE'RE HIT");
        }
        _results.push(this._checkBulletCollisions(asteroid));
      }
      return _results;
    };

    Game.prototype._checkBulletCollisions = function(asteroid) {
      var bullet, _i, _len, _ref, _results;
      _ref = this.bullets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        if (bullet.isCollidedWith(asteroid)) {
          _results.push(console.log("We got one!"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Game.prototype._step = function() {
      this._checkCollisions();
      this._moveAllTheThings();
      return this._drawAllTheThings();
    };

    Game.prototype._addAsteroids = function(numAsteroids) {
      var _results;
      _results = [];
      while (numAsteroids -= 1) {
        _results.push(this.asteroids.push(Asteroids.Asteroid.randomAsteroid(Asteroids.Game.DIM_X, Asteroids.Game.DIM_Y)));
      }
      return _results;
    };

    Game.prototype._bindKeyHandlers = function() {
      var _this = this;
      key("w", function() {
        return _this.ship.power({
          x: 5.0,
          y: 5.0
        });
      });
      key("a", function() {
        return _this.ship.power({
          x: 5.0,
          y: 5.0
        });
      });
      key("d", function() {
        return _this.ship.power({
          x: 5.0,
          y: 5.0
        });
      });
      return key("space", function() {
        return _this.bullets.push(_this.ship.fireBullet());
      });
    };

    return Game;

  })();

}).call(this);
